{"ast":null,"code":"const initial = {\n  usage: 'none',\n  customer: {\n    id: \"\",\n    name: \"\",\n    email: \"\"\n  },\n  event: {\n    id: \"-1\",\n    code: \"\",\n    title: \"\",\n    description: \"\"\n  },\n  registration: {\n    id: \"-1\",\n    event_id: \"-1\",\n    customer_id: \"-1\",\n    registration_date: -1,\n    notes: \"\"\n  }\n};\n\nconst formState = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let data = arguments.length > 2 ? arguments[2] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE_CUSTOMER_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let customer = Object.assign({}, state.customer, field);\n        const obj = Object.assign({}, state, {\n          customer\n        });\n        return obj;\n      }\n\n    case 'UPDATE_CUSTOMER_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_customer = {\n          customer: {\n            id: \"-1\",\n            name: \"\",\n            email: \"\"\n          }\n        };\n        console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_customer = {\n            customer: Object.assign({}, action.customer)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\n          new_customer = {\n            customer: {\n              id: id,\n              name: \"\",\n              email: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_customer, usage);\n      }\n\n    case 'UPDATE_EVENT_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let event = Object.assign({}, state.event, field);\n        const obj = Object.assign({}, state, {\n          event\n        });\n        return obj;\n      }\n\n    case 'UPDATE_EVENT_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_event = {\n          event: {\n            id: -1,\n            code: \"\",\n            title: \"\",\n            description: \"\"\n          }\n        };\n        console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_event = {\n            event: Object.assign({}, action.event)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_event = {\n            event: {\n              id: id,\n              code: \"\",\n              title: \"\",\n              description: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_event, usage);\n      }\n\n    case 'UPDATE_REGISTRATION_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let registration = Object.assign({}, state.registration, field);\n        const obj = Object.assign({}, state, {\n          registration\n        });\n        return obj;\n      }\n\n    case 'UPDATE_REGISTRATION_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_registration = {\n          registration: {\n            id: -1,\n            event_id: \"-1\",\n            customer_id: \"-1\",\n            registration_date: -1,\n            notes: \"\"\n          }\n        };\n        console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_registration = {\n            registration: Object.assign({}, action.registration)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_registration = {\n            registration: {\n              id: id,\n              event_id: \"-1\",\n              customer_id: \"-1\",\n              registration_date: -1,\n              notes: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_registration, usage);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default formState;","map":{"version":3,"names":["initial","usage","customer","id","name","email","event","code","title","description","registration","event_id","customer_id","registration_date","notes","formState","state","action","data","type","field","field_name","field_value","Object","assign","obj","new_customer","console","log","JSON","stringify","Math","floor","random","Date","now","toString","new_event","new_registration"],"sources":["/home/wasadmin/project/tldp-client-react/src/reducers/formState.js"],"sourcesContent":["const initial = { \n  usage: 'none', \n  customer: { id: \"\", name: \"\", email: \"\" } ,\n  event: { id: \"-1\", code: \"\", title: \"\", description: \"\" },\n  registration: { id: \"-1\", event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" }\n};\n\nconst formState = (state = initial, action, data) => {\n\n  switch (action.type) {\n    case 'UPDATE_CUSTOMER_FORM_OBJECT': {\n      let field = {};\n      field[action.field_name] = action.field_value;\n      let customer = Object.assign({}, state.customer, field);\n      const obj = Object.assign({}, state, { customer });\n      return obj;\n    }\n\n    case 'UPDATE_CUSTOMER_FORM_USAGE': {\n      let usage = { usage: action.usage };\n      let new_customer = { customer: { id: \"-1\", name: \"\", email: \"\" } };\n\n      console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer))\n\n      if (action.usage === 'view' || action.usage === 'edit') {\n        new_customer = { customer: Object.assign({}, action.customer) };\n      } else {\n        let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\n        new_customer = { customer: { id: id, name: \"\", email: \"\" } };\n      }\n\n      return Object.assign({}, state, new_customer, usage);\n    }\n\n    case 'UPDATE_EVENT_FORM_OBJECT': {\n      let field = {};\n      field[action.field_name] = action.field_value;\n      let event = Object.assign({}, state.event, field);\n      const obj = Object.assign({}, state, { event });\n      return obj;\n    }\n\n    case 'UPDATE_EVENT_FORM_USAGE': {\n      let usage = { usage: action.usage };\n      let new_event = { event: { id: -1, code: \"\", title: \"\", description: \"\" } };\n\n      console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event))\n\n      if (action.usage === 'view' || action.usage === 'edit') {\n        new_event = { event: Object.assign({}, action.event) };\n      } else {\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n        new_event = { event: { id: id, code: \"\", title: \"\", description: \"\" } };\n      }\n\n      return Object.assign({}, state, new_event, usage);\n    }\n\n    case 'UPDATE_REGISTRATION_FORM_OBJECT': {\n      let field = {};\n      field[action.field_name] = action.field_value;\n      let registration = Object.assign({}, state.registration, field);\n      const obj = Object.assign({}, state, { registration });\n      return obj;\n    }\n\n    case 'UPDATE_REGISTRATION_FORM_USAGE': {\n      let usage = { usage: action.usage };\n      let new_registration = { registration: { id: -1, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\n\n      console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration))\n\n      if (action.usage === 'view' || action.usage === 'edit') {\n        new_registration = { registration: Object.assign({}, action.registration) };\n      } else {\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n        new_registration = { registration: { id: id, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\n      }\n\n      return Object.assign({}, state, new_registration, usage);\n    }\n    \n    default:\n      return state\n  }\n}\n\nexport default formState"],"mappings":"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"},"metadata":{},"sourceType":"module"}