{"ast":null,"code":"import { applyUsersUpdate, loginSucceeded, loginFailed } from \"../actions\";\n\nclass RestAPI {\n  constructor() {\n    this.registerUser = (dispatch, username, password, email) => {\n      let url = \"/api/accounts/register\";\n      let user = {\n        name: username,\n        email: email,\n        password: password\n      };\n      let body = JSON.stringify(user);\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      var myInit = {\n        method: \"POST\",\n        body: body,\n        headers: myHeaders,\n        mode: \"cors\"\n      };\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log(\"register request completed: \", text);\n      });\n    };\n\n    this.loginUser = (dispatch, username, password) => {\n      console.log(\"loginUser: \" + username);\n      let url = \"/api/accounts/login\";\n      let credenttials = {\n        username: username,\n        password: password\n      };\n      let body = JSON.stringify(credenttials);\n      let headers = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      var myInit = {\n        method: \"POST\",\n        body: body,\n        headers: headers,\n        mode: \"cors\"\n      };\n      fetch(url, myInit).then(response => {\n        if (response !== \"\" && response.status === 200) {\n          console.log(\"loginUser: SUCCESS\");\n          let action = loginSucceeded();\n          dispatch(action);\n        } else {\n          console.log(\"loginUser: FAILURE\");\n          let action = loginFailed();\n          dispatch(action);\n        }\n      }, error => {\n        console.log(\"loginUser: ERROR\");\n        let action = loginFailed();\n        dispatch(action);\n      });\n    };\n\n    this.getUsers = dispatch => {\n      // var myInit = { method: 'GET', headers: this.myHeaders, mode: 'cors' };\n      var myInit = {\n        method: \"GET\",\n        mode: \"cors\"\n      };\n      let promise = fetch(\"/api/users\", myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log(\"getUsers Request successful: \", text);\n        let users = JSON.parse(text);\n        dispatch(applyUsersUpdate(users));\n      });\n    };\n\n    this.lookupUserByName = username => {\n      let url = \"/api/users/byname\";\n      let body = username;\n      var myInit = {\n        method: \"POST\",\n        body: body,\n        headers: this.myHeaders,\n        mode: \"cors\"\n      };\n      let promise = fetch(url, myInit);\n      let promise2 = promise.then(response => {\n        console.log(\"lookupUserByName.promise2: \", JSON.stringify(response));\n        return response.text();\n      }, error => {\n        console.log(\"lookupUserByName.promise2.error: \", JSON.stringify(error));\n        return error.text();\n      });\n      return promise2;\n    };\n\n    this.postUser = (dispatch, user) => {\n      let url = \"/api/users/\";\n      let body = JSON.stringify(user);\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      var myInit = {\n        method: \"POST\",\n        body: body,\n        headers: myHeaders,\n        mode: \"cors\"\n      };\n      let getusers = this.getUsers;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log(\"put request completed: \", text);\n        getusers(dispatch);\n      });\n    };\n\n    this.deleteUser = (dispatch, user) => {\n      let url = \"/api/users/\" + user.id;\n      var myInit = {\n        method: \"DELETE\",\n        headers: this.myHeaders,\n        mode: \"cors\"\n      };\n      let getusers = this.getUsers;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log(\"delete request completed: \", text);\n        getusers(dispatch);\n      });\n    };\n  }\n\n}\n\nexport default RestAPI;","map":{"version":3,"names":["applyUsersUpdate","loginSucceeded","loginFailed","RestAPI","registerUser","dispatch","username","password","email","url","user","name","body","JSON","stringify","myHeaders","Headers","myInit","method","headers","mode","promise","fetch","then","response","text","console","log","loginUser","credenttials","status","action","error","getUsers","users","parse","lookupUserByName","promise2","postUser","getusers","deleteUser","id"],"sources":["/home/wasadmin/Hackathon/client/src/rest/index.js"],"sourcesContent":["import { applyUsersUpdate, loginSucceeded, loginFailed } from \"../actions\";\n\nclass RestAPI {\n  /* LOGIN REQUESTS */\n  registerUser = (dispatch, username, password, email) => {\n    let url = \"/api/accounts/register\";\n    let user = {\n      name: username,\n      email: email,\n      password: password,\n    };\n    let body = JSON.stringify(user);\n    let myHeaders = new Headers({ \"Content-Type\": \"application/json\" });\n    var myInit = {\n      method: \"POST\",\n      body: body,\n      headers: myHeaders,\n      mode: \"cors\",\n    };\n    let promise = fetch(url, myInit);\n    promise\n      .then((response) => {\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(\"register request completed: \", text);\n      });\n  };\n\n  loginUser = (dispatch, username, password) => {\n    console.log(\"loginUser: \" + username);\n    let url = \"/api/accounts/login\";\n    let credenttials = { username: username, password: password };\n    let body = JSON.stringify(credenttials);\n    let headers = new Headers({ \"Content-Type\": \"application/json\" });\n    var myInit = {\n      method: \"POST\",\n      body: body,\n      headers: headers,\n      mode: \"cors\",\n    };\n\n    fetch(url, myInit).then(\n      (response) => {\n        if (response !== \"\" && response.status === 200) {\n          console.log(\"loginUser: SUCCESS\");\n          let action = loginSucceeded();\n          dispatch(action);\n        } else {\n          console.log(\"loginUser: FAILURE\");\n          let action = loginFailed();\n          dispatch(action);\n        }\n      },\n      (error) => {\n        console.log(\"loginUser: ERROR\");\n        let action = loginFailed();\n        dispatch(action);\n      }\n    );\n  };\n\n  /* USER REQUESTS */\n  getUsers = (dispatch) => {\n    // var myInit = { method: 'GET', headers: this.myHeaders, mode: 'cors' };\n    var myInit = { method: \"GET\", mode: \"cors\" };\n    let promise = fetch(\"/api/users\", myInit);\n    promise\n      .then((response) => {\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(\"getUsers Request successful: \", text);\n        let users = JSON.parse(text);\n        dispatch(applyUsersUpdate(users));\n      });\n  };\n\n  lookupUserByName = (username) => {\n    let url = \"/api/users/byname\";\n    let body = username;\n\n    var myInit = {\n      method: \"POST\",\n      body: body,\n      headers: this.myHeaders,\n      mode: \"cors\",\n    };\n    let promise = fetch(url, myInit);\n    let promise2 = promise.then(\n      (response) => {\n        console.log(\"lookupUserByName.promise2: \", JSON.stringify(response));\n        return response.text();\n      },\n      (error) => {\n        console.log(\"lookupUserByName.promise2.error: \", JSON.stringify(error));\n        return error.text();\n      }\n    );\n    return promise2;\n  };\n\n  postUser = (dispatch, user) => {\n    let url = \"/api/users/\";\n    let body = JSON.stringify(user);\n    let myHeaders = new Headers({ \"Content-Type\": \"application/json\" });\n    var myInit = {\n      method: \"POST\",\n      body: body,\n      headers: myHeaders,\n      mode: \"cors\",\n    };\n    let getusers = this.getUsers;\n    let promise = fetch(url, myInit);\n    promise\n      .then((response) => {\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(\"put request completed: \", text);\n        getusers(dispatch);\n      });\n  };\n\n  deleteUser = (dispatch, user) => {\n    let url = \"/api/users/\" + user.id;\n    var myInit = { method: \"DELETE\", headers: this.myHeaders, mode: \"cors\" };\n    let getusers = this.getUsers;\n    let promise = fetch(url, myInit);\n    promise\n      .then((response) => {\n        return response.text();\n      })\n      .then(function (text) {\n        console.log(\"delete request completed: \", text);\n        getusers(dispatch);\n      });\n  };\n}\n\nexport default RestAPI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}